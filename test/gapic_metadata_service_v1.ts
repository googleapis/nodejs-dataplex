// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as metadataserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.MetadataServiceClient', () => {
  it('has servicePath', () => {
    const servicePath =
      metadataserviceModule.v1.MetadataServiceClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint =
      metadataserviceModule.v1.MetadataServiceClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = metadataserviceModule.v1.MetadataServiceClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new metadataserviceModule.v1.MetadataServiceClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new metadataserviceModule.v1.MetadataServiceClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new metadataserviceModule.v1.MetadataServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.metadataServiceStub, undefined);
    await client.initialize();
    assert(client.metadataServiceStub);
  });

  it('has close method', () => {
    const client = new metadataserviceModule.v1.MetadataServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new metadataserviceModule.v1.MetadataServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new metadataserviceModule.v1.MetadataServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('getEntity', () => {
    it('invokes getEntity without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntityRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entity()
      );
      client.innerApiCalls.getEntity = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntity(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getEntity as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getEntity without error using callback', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntityRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entity()
      );
      client.innerApiCalls.getEntity =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntity(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntity | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getEntity as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getEntity with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntityRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntity = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getEntity(request), expectedError);
      assert(
        (client.innerApiCalls.getEntity as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getPartition', () => {
    it('invokes getPartition without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetPartitionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Partition()
      );
      client.innerApiCalls.getPartition = stubSimpleCall(expectedResponse);
      const [response] = await client.getPartition(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getPartition as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getPartition without error using callback', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetPartitionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Partition()
      );
      client.innerApiCalls.getPartition =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPartition(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IPartition | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getPartition as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getPartition with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetPartitionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getPartition = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPartition(request), expectedError);
      assert(
        (client.innerApiCalls.getPartition as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('listEntities', () => {
    it('invokes listEntities without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
      ];
      client.innerApiCalls.listEntities = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntities(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listEntities as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listEntities without error using callback', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
      ];
      client.innerApiCalls.listEntities =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntities(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntity[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listEntities as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listEntities with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntities = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntities(request), expectedError);
      assert(
        (client.innerApiCalls.listEntities as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listEntitiesStream without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
      ];
      client.descriptors.page.listEntities.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntitiesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.Entity[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.Entity) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntities.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntities, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listEntities.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listEntitiesStream with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listEntities.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listEntitiesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.Entity[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.Entity) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntities.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntities, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listEntities.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listEntities without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entity()),
      ];
      client.descriptors.page.listEntities.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.IEntity[] = [];
      const iterable = client.listEntitiesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntities.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listEntities.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listEntities with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntitiesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listEntities.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listEntitiesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.IEntity[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntities.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listEntities.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listPartitions', () => {
    it('invokes listPartitions without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
      ];
      client.innerApiCalls.listPartitions = stubSimpleCall(expectedResponse);
      const [response] = await client.listPartitions(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listPartitions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listPartitions without error using callback', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
      ];
      client.innerApiCalls.listPartitions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPartitions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IPartition[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listPartitions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listPartitions with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listPartitions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPartitions(request), expectedError);
      assert(
        (client.innerApiCalls.listPartitions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listPartitionsStream without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
      ];
      client.descriptors.page.listPartitions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPartitionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.Partition[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.Partition) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPartitions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPartitions, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPartitions.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listPartitionsStream with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listPartitions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPartitionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.Partition[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.Partition) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPartitions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPartitions, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPartitions.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listPartitions without error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Partition()),
      ];
      client.descriptors.page.listPartitions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.IPartition[] = [];
      const iterable = client.listPartitionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPartitions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPartitions.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listPartitions with error', async () => {
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListPartitionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listPartitions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPartitionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.IPartition[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPartitions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPartitions.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('asset', () => {
      const fakePath = '/rendered/path/asset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        asset: 'assetValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.assetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.assetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('assetPath', () => {
        const result = client.assetPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'assetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.assetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAssetName', () => {
        const result = client.matchProjectFromAssetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAssetName', () => {
        const result = client.matchLocationFromAssetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromAssetName', () => {
        const result = client.matchLakeFromAssetName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromAssetName', () => {
        const result = client.matchZoneFromAssetName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromAssetName', () => {
        const result = client.matchAssetFromAssetName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entity', () => {
      const fakePath = '/rendered/path/entity';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        entity: 'entityValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entityPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entityPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entityPath', () => {
        const result = client.entityPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'entityValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entityPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntityName', () => {
        const result = client.matchProjectFromEntityName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntityName', () => {
        const result = client.matchLocationFromEntityName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromEntityName', () => {
        const result = client.matchLakeFromEntityName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromEntityName', () => {
        const result = client.matchZoneFromEntityName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityFromEntityName', () => {
        const result = client.matchEntityFromEntityName(fakePath);
        assert.strictEqual(result, 'entityValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('job', () => {
      const fakePath = '/rendered/path/job';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        task: 'taskValue',
        job: 'jobValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.jobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.jobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('jobPath', () => {
        const result = client.jobPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'taskValue',
          'jobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.jobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromJobName', () => {
        const result = client.matchProjectFromJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromJobName', () => {
        const result = client.matchLocationFromJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromJobName', () => {
        const result = client.matchLakeFromJobName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaskFromJobName', () => {
        const result = client.matchTaskFromJobName(fakePath);
        assert.strictEqual(result, 'taskValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchJobFromJobName', () => {
        const result = client.matchJobFromJobName(fakePath);
        assert.strictEqual(result, 'jobValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('lake', () => {
      const fakePath = '/rendered/path/lake';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.lakePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.lakePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('lakePath', () => {
        const result = client.lakePath(
          'projectValue',
          'locationValue',
          'lakeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.lakePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLakeName', () => {
        const result = client.matchProjectFromLakeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.lakePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLakeName', () => {
        const result = client.matchLocationFromLakeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.lakePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromLakeName', () => {
        const result = client.matchLakeFromLakeName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.lakePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('partition', () => {
      const fakePath = '/rendered/path/partition';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        entity: 'entityValue',
        partition: 'partitionValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.partitionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.partitionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('partitionPath', () => {
        const result = client.partitionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'entityValue',
          'partitionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.partitionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPartitionName', () => {
        const result = client.matchProjectFromPartitionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPartitionName', () => {
        const result = client.matchLocationFromPartitionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromPartitionName', () => {
        const result = client.matchLakeFromPartitionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromPartitionName', () => {
        const result = client.matchZoneFromPartitionName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityFromPartitionName', () => {
        const result = client.matchEntityFromPartitionName(fakePath);
        assert.strictEqual(result, 'entityValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPartitionFromPartitionName', () => {
        const result = client.matchPartitionFromPartitionName(fakePath);
        assert.strictEqual(result, 'partitionValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationLakeAction', () => {
      const fakePath = '/rendered/path/projectLocationLakeAction';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        action: 'actionValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationLakeActionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectLocationLakeActionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationLakeActionPath', () => {
        const result = client.projectLocationLakeActionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'actionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationLakeActionName', () => {
        const result =
          client.matchProjectFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationLakeActionName', () => {
        const result =
          client.matchLocationFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromProjectLocationLakeActionName', () => {
        const result =
          client.matchLakeFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActionFromProjectLocationLakeActionName', () => {
        const result =
          client.matchActionFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'actionValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationLakeZoneAction', () => {
      const fakePath = '/rendered/path/projectLocationLakeZoneAction';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        action: 'actionValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationLakeZoneActionPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationLakeZoneActionPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationLakeZoneActionPath', () => {
        const result = client.projectLocationLakeZoneActionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'actionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchProjectFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchLocationFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchLakeFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchZoneFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActionFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchActionFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'actionValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationLakeZoneAssetAction', () => {
      const fakePath = '/rendered/path/projectLocationLakeZoneAssetAction';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        asset: 'assetValue',
        action: 'actionValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationLakeZoneAssetActionPath', () => {
        const result = client.projectLocationLakeZoneAssetActionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'assetValue',
          'actionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchProjectFromProjectLocationLakeZoneAssetActionName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchLocationFromProjectLocationLakeZoneAssetActionName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchLakeFromProjectLocationLakeZoneAssetActionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchZoneFromProjectLocationLakeZoneAssetActionName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchAssetFromProjectLocationLakeZoneAssetActionName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActionFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchActionFromProjectLocationLakeZoneAssetActionName(
            fakePath
          );
        assert.strictEqual(result, 'actionValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('task', () => {
      const fakePath = '/rendered/path/task';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        task: 'taskValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.taskPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.taskPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('taskPath', () => {
        const result = client.taskPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'taskValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.taskPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTaskName', () => {
        const result = client.matchProjectFromTaskName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTaskName', () => {
        const result = client.matchLocationFromTaskName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromTaskName', () => {
        const result = client.matchLakeFromTaskName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaskFromTaskName', () => {
        const result = client.matchTaskFromTaskName(fakePath);
        assert.strictEqual(result, 'taskValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('zone', () => {
      const fakePath = '/rendered/path/zone';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
      };
      const client = new metadataserviceModule.v1.MetadataServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.zonePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.zonePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('zonePath', () => {
        const result = client.zonePath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.zonePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromZoneName', () => {
        const result = client.matchProjectFromZoneName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromZoneName', () => {
        const result = client.matchLocationFromZoneName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromZoneName', () => {
        const result = client.matchLakeFromZoneName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromZoneName', () => {
        const result = client.matchZoneFromZoneName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
